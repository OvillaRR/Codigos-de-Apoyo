
# ---------------------------------------------------------------------
# 1. Listas de palabras clave y parámetros
# ---------------------------------------------------------------------
DEPOSITO_KEYS = ["depositos", "deposito", "abonos", "abono", "ingresos", "ingreso"]
RETIRO_KEYS   = ["retiros", "retiro", "cargos", "cargo", "egresos", "egreso", "compra"]

SIMILARITY_THRESHOLD = 65           # fuzzy-ratio mínimo
LOOKAHEAD            = 6            # nº máximo de tokens a revisar tras la keyword
MAX_DIGITS           = 10           # descartar números con >10 dígitos netos
STOP_WORDS = {
    "saldo", "rendimiento", "intereses", "tasa",
    "promedio", "periodo", "días", "dias"
}


# ---------------------------------------------------------------------
# 2. Tokenizador simple (no rompe los números)
# ---------------------------------------------------------------------
def tokenizar_texto_simple(texto: str):
    return re.findall(r"[\w.,'-]+|\S", texto)


# ---------------------------------------------------------------------
# 3. Heurística “parece monto”
# ---------------------------------------------------------------------
def es_monto_potencial(token: str) -> bool:
    if token is None or not re.search(r"\d", token):
        return False
    solo_dig = re.sub(r"\D", "", token)
    # 3–10 dígitos y no todos iguales (evita 00000, 111111…)
    return 3 <= len(solo_dig) <= MAX_DIGITS and len(set(solo_dig)) > 1


# ---------------------------------------------------------------------
# 4. Conversión robusta a float
# ---------------------------------------------------------------------
def _to_float(token: str):
    if token is None:
        return None

    t = token.lower()
    # Corrección OCR básica
    for bad, good in {'o': '0', 'l': '1', 's': '5', 'b': '8'}.items():
        t = t.replace(bad, good)

    # último separador decimal
    idx = max(t.rfind(','), t.rfind('.'))

    if idx == -1:
        entero = re.sub(r"\D", "", t)
        if not entero or len(entero) > MAX_DIGITS:
            return None
        return float(entero)

    parte_entera = re.sub(r"\D", "", t[:idx])
    parte_dec    = re.sub(r"\D", "", t[idx+1:])
    if not parte_entera or len(parte_entera) > MAX_DIGITS:
        return None
    if not (1 <= len(parte_dec) <= 2):
        return None       # exige 1 o 2 decimales

    return float(f"{parte_entera}.{parte_dec}")


# ---------------------------------------------------------------------
# 5. Función principal
# ---------------------------------------------------------------------
def extraer_montos_con_reglas(texto: str):
    tokens = tokenizar_texto_simple(texto)
    resultados = {}

    # localizar todas las keywords
    keywords = []
    for i, tok in enumerate(tokens):
        low = tok.lower()
        if any(ratio(low, k) > SIMILARITY_THRESHOLD for k in DEPOSITO_KEYS):
            keywords.append((i, "DEPOSITO"))
        elif any(ratio(low, k) > SIMILARITY_THRESHOLD for k in RETIRO_KEYS):
            keywords.append((i, "RETIRO"))

    # recorrer cada keyword encontrada
    for idx_kw, (pos, tipo) in enumerate(keywords):
        # ---------- 1) Ventana de búsqueda: hasta LOOKAHEAD o antes de STOP_WORD ----------
        start = pos + 1
        end_by_lookahead = min(start + LOOKAHEAD, len(tokens))
        # stop-word más próxima
        end_by_stop = next((j for j in range(start, end_by_lookahead)
                            if tokens[j].lower() in STOP_WORDS), end_by_lookahead)
        end = min(end_by_lookahead, end_by_stop)
        ventana = tokens[start:end]

        # ---------- 2) Obtener candidatos numéricos en la ventanita ----------
        candidatos = []
        for tok in ventana:
            if es_monto_potencial(tok):
                val = _to_float(tok)
                if val is not None and 0 < val < 10_000_000:  # techo opcional
                    candidatos.append(val)

        # ---------- 3) Si no hay ningún candidato, descarta esta keyword ----------
        if not candidatos:
            continue

        # ---------- 4) Elegir el mayor candidato (regla práctica) ----------
        monto_seleccionado = max(candidatos)

        # guardar solo si aún no existe (primera ocurrencia) o si es mayor
        clave = f"MONTO_{tipo}"
        if clave not in resultados or monto_seleccionado > resultados[clave]:
            resultados[clave] = monto_seleccionado

    return resultados