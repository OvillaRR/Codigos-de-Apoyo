# ──────────────────────────────────────────────────────────────
# 4.  Función principal (CORREGIDA)
# ──────────────────────────────────────────────────────────────
def extraer_datos_cliente(texto: str) -> Dict[str, str]:
    """
    Devuelve dict con campos:
        • CLIENTE : 6-10 dígitos
        • CUENTA  : 8-16 dígitos
        • CLABE   : 17-25 dígitos (puede venir fragmentada)

    Ejemplo:
    >>> txt = ('citibanamex el banco nacional de mexico pagina 1 de 11 estado de cuenta sinaloa c.r.80011 in periodo dei 9 de junio al 8 de julio del 2023 fecha de corte 07 de julio de2023 gat nominal y real antes de impuestos no aplica interes aplicable o rendimientos $0.00 namero de contrato 9916603388 comisiones efectivamente cobradas $0.00 nomero de sucursal nomero de caenta de cheques 70178273009 4368 nomero de tarjeta de debito comportamiento cuenta clabe interbancaria 5204165793574496 002730701782730090 nomero de cliente 34938163')
    >>> extraer_datos_cliente(txt)
    {'CUENTA': '701782730094368', 'CLABE': '5204165793574496002730701782730090', 'CLIENTE': '34938163'}
    """
    tokens = _tokenize(texto)
    resultado: Dict[str, str] = {}

    # Diccionario con las llaves para buscar
    KEY_MAP = {
        "CLIENTE": CLIENTE_KEYS,
        "CUENTA": CUENTA_KEYS,
        "CLABE": CLABE_KEYS,
    }

    i = 0
    while i < len(tokens):
        tok = tokens[i]
        low = tok.lower()

        # Función auxiliar para buscar coincidencias fuzzy
        def _match(keys):
            return any(ratio(low, k) >= SIMILARITY for k in keys)

        matched_tag: Optional[str] = None
        # Itera sobre los tipos de campo para ver si el token coincide con alguna de sus llaves
        for tag, keys in KEY_MAP.items():
            if tag not in resultado and _match(keys): # Solo busca si aún no lo hemos encontrado
                matched_tag = tag
                break # Encontramos una coincidencia, no necesitamos seguir buscando

        if matched_tag:
            # Si encontramos una palabra clave, intentamos extraer su número
            num, consumed = _extract_numeric_window(tokens, i + 1, matched_tag)
            val = _validate_field(matched_tag, num)
            
            # Si la validación es exitosa y el campo no ha sido llenado, lo guardamos
            if val and matched_tag not in resultado:
                resultado[matched_tag] = val
                # Avanzamos el índice por la palabra clave (1) y los tokens del número (consumed)
                i += consumed + 1
                continue # Pasamos a la siguiente iteración del bucle while

        # Si no hubo coincidencia o la extracción/validación falló, avanzamos solo un token
        i += 1

    return resultado