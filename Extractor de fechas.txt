import re
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Tuple

# ──────────────────────────────────────────────────────────────
# 1. Funciones de Similitud y Tokenización
# ──────────────────────────────────────────────────────────────

def _levenshtein(a: str, b: str) -> int:
    if a == b: return 0
    if not a: return len(b)
    if not b: return len(a)
    if len(a) > len(b): a, b = b, a
    prev = list(range(len(a) + 1)); curr = [0] * (len(a) + 1)
    for i, ch_b in enumerate(b, 1):
        curr[0] = i
        for j, ch_a in enumerate(a, 1):
            ins, dele, subst = prev[j] + 1, curr[j-1] + 1, prev[j-1] + (ch_a != ch_b)
            curr[j] = min(ins, dele, subst)
        prev, curr = curr, prev
    return prev[-1]

def ratio(s1: str, s2: str) -> int:
    dist = _levenshtein(s1.lower(), s2.lower())
    mx = max(len(s1), len(s2))
    return 100 if mx == 0 else int(round((1 - dist / mx) * 100))

TOKEN_RE = re.compile(r"[\w/.,'-]+|\S")
def _tokenize(txt: str) -> List[str]:
    return TOKEN_RE.findall(txt)

# ──────────────────────────────────────────────────────────────
# 2. Constantes (ACTUALIZADAS Y AMPLIADAS)
# ──────────────────────────────────────────────────────────────

SIMILARITY = 75
PERIODO_KEYS = ["periodo", "periodo del", "perido"]

# --- NUEVO: Regex para formato "DÚO" -> 04-jul-23/02-ago-23 ---
RE_FECHA_DUO = re.compile(
    r"(\d{1,2})\s*-\s*([a-zA-ZÁÉÍÓÚñÑ\.]+)\s*-\s*(\d{2,4})\s*/\s*"
    r"(\d{1,2})\s*-\s*([a-zA-ZÁÉÍÓÚñÑ\.]+)\s*-\s*(\d{2,4})"
)
# --- Regex actualizadas para soportar años de 2 o 4 dígitos ---
RE_FECHA_SLASH = re.compile(r"(\d{1,2})\s*[/.\-]\s*([a-zA-ZÁÉÍÓÚñÑ\.]+)\s*[/.\-]\s*(\d{2,4})")
RE_FECHA_DE = re.compile(r"(\d{1,2})\s+de\s+([a-zA-ZÁÉÍÓÚñÑ]+)(?:\s+de\s+|\s+)(\d{2,4})?")

MESES_MAP = {
    'ene': 1, 'feb': 2, 'mar': 3, 'abr': 4, 'may': 5, 'jun': 6,
    'jul': 7, 'ago': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dic': 12
}

# ──────────────────────────────────────────────────────────────
# 3. Funciones Auxiliares para Fechas (REDISEÑADAS)
# ──────────────────────────────────────────────────────────────

def _fix_two_digit_year(year: int) -> int:
    """Convierte un año de 2 dígitos a 4 (ej. 23 -> 2023, 99 -> 1999)."""
    if year > 1000: # Ya es de 4 dígitos
        return year
    current_year_short = datetime.now().year % 100
    # Si el año es mayor al actual (ej. en 2025, '99' es del siglo pasado)
    if year > current_year_short + 1:
        return 1900 + year
    else: # Es del siglo actual
        return 2000 + year

def _parse_date_from_parts(d_str: str, m_str: str, y_str: Optional[str] = None) -> Optional[datetime]:
    """Crea un objeto datetime a partir de sus componentes en string."""
    try:
        mes_norm = m_str.lower().replace('.', '')[:3]
        if mes_norm not in MESES_MAP:
            return None
        
        day = int(d_str)
        month = MESES_MAP[mes_norm]
        # Si no hay año, usamos año 1 como marcador temporal
        year = _fix_two_digit_year(int(y_str)) if y_str else 1
        
        return datetime(year=year, month=month, day=day)
    except (ValueError, TypeError):
        return None

def _extract_periodo_window(tokens: List[str], start: int) -> Tuple[Optional[Dict[str, str]], int]:
    """Busca un periodo válido en una ventana, priorizando formatos "dúo"."""
    window_tokens = tokens[start : start + 15]
    window_str = " ".join(window_tokens)
    
    # --- Prioridad 1: Buscar formato "Dúo" ---
    match_duo = RE_FECHA_DUO.search(window_str)
    if match_duo:
        g = match_duo.groups()
        fecha1_obj = _parse_date_from_parts(g[0], g[1], g[2])
        fecha2_obj = _parse_date_from_parts(g[3], g[4], g[5])
        if fecha1_obj and fecha2_obj:
             if abs((fecha2_obj - fecha1_obj).days) >= 20:
                inicio = min(fecha1_obj, fecha2_obj)
                fin = max(fecha1_obj, fecha2_obj)
                return {"inicio": inicio.strftime('%Y-%m-%d'), "fin": fin.strftime('%Y-%m-%d')}, len(window_tokens)

    # --- Prioridad 2: Buscar dos fechas separadas (lógica anterior mejorada) ---
    fechas_encontradas = []
    for regex in [RE_FECHA_SLASH, RE_FECHA_DE]:
        for match in regex.finditer(window_str):
            grupos_validos = tuple(g for g in match.groups() if g)
            fecha_obj = _parse_date_from_parts(*grupos_validos)
            if fecha_obj:
                fechas_encontradas.append({'fecha': fecha_obj, 'pos': match.start()})
    
    if len(fechas_encontradas) >= 2:
        fechas_encontradas.sort(key=lambda x: x['pos'])
        fecha1_obj, fecha2_obj = fechas_encontradas[0]['fecha'], fechas_encontradas[1]['fecha']

        if fecha1_obj.year == 1 and fecha2_obj.year != 1:
            fecha1_obj = fecha1_obj.replace(year=fecha2_obj.year)
            if fecha1_obj > fecha2_obj: fecha1_obj = fecha1_obj.replace(year=fecha2_obj.year - 1)
        
        if abs((fecha2_obj - fecha1_obj).days) >= 20:
            inicio, fin = min(fecha1_obj, fecha2_obj), max(fecha1_obj, fecha2_obj)
            return {"inicio": inicio.strftime('%Y-%m-%d'), "fin": fin.strftime('%Y-%m-%d')}, len(window_tokens)
            
    return None, 0

# ──────────────────────────────────────────────────────────────
# 4. Función Principal (sin cambios, usa los nuevos helpers)
# ──────────────────────────────────────────────────────────────
def extraer_periodo(texto: str) -> Optional[Dict[str, str]]:
    tokens = _tokenize(texto)
    i = 0
    while i < len(tokens):
        keyword_found = False
        for phrase_len in range(3, 0, -1):
            if i + phrase_len > len(tokens): continue
            phrase = " ".join(tokens[i : i + phrase_len])
            if any(ratio(phrase.lower(), k.lower()) >= SIMILARITY for k in PERIODO_KEYS):
                keyword_found = True
                periodo, _ = _extract_periodo_window(tokens, i + phrase_len)
                if periodo: return periodo
                i += phrase_len
                break
        if not keyword_found: i += 1
    return None

# ──────────────────────────────────────────────────────────────
# Ejemplo de Uso
# ──────────────────────────────────────────────────────────────
if __name__ == '__main__':
    textos_de_prueba = [
        "Estado de cuenta del perido 05/FEB./2025 al 04/MAR./2025. Saldo final.",
        "Movimientos del periodo del 01/Febrero/2021, con transacciones hasta el 28/Febrero/2021",
        "periodo: del 17 de marzo al 16 de abril 2025",
        "periodo 04-jul-23/02-ago-23 no", # El nuevo caso de prueba
        "Este documento no contiene un periodo de fechas.",
        "Periodo del 1 de Junio 2025, fecha de corte 5 de junio 2025"
    ]
    for i, texto in enumerate(textos_de_prueba, 1):
        print(f"Texto {i}: '{texto}'")
        print("Periodo Encontrado:", extraer_periodo(texto))
        print("-" * 30)
