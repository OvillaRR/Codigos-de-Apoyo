# ──────────────────────────────────────────────────────────────
# 1.  Tokenizador (no incluye espacios como tokens)
# ──────────────────────────────────────────────────────────────
TOKEN_RE = re.compile(r"[\w.,'-]+|\S")
def _tokenize(txt: str) -> List[str]:
    return TOKEN_RE.findall(txt)


# ──────────────────────────────────────────────────────────────
# 2.  Parámetros
# ──────────────────────────────────────────────────────────────
SIMILARITY = 65     # umbral fuzzy
LOOKAHEAD  = 8      # tokens máximos a la derecha

CLIENTE_KEYS = [
    "cliente", "id cliente", "idcliente", "no cliente", "nº cliente"
]
CUENTA_KEYS = [
    "cuenta", "num cuenta", "número de cuenta", "n° de cuenta",
    "cuena", "caenta"                # alias OCR comunes
]
CLABE_KEYS = [
    "clabe", "clabe inter", "clabe interbancaria", "clabe:",
    "clae", "clbe"                   # alias OCR comunes
]

# palabras que verdaderamente indican sección financiera
FIN_STOP = {
    "saldo", "deposito", "depositos", "retiro", "retiros",
    "cargos", "abono", "abonos", "intereses", "tasa", "rendimiento"
}


# ──────────────────────────────────────────────────────────────
# 3.  Helpers numéricos
# ──────────────────────────────────────────────────────────────
def _is_num_token(tok: str, tag: str) -> bool:
    """True si el token parece parte del número requerido."""
    if not tok or not tok[0].isdigit():
        return False
    digits = re.sub(r"\D", "", tok)
    if tag == "CLABE":
        return 2 <= len(digits) <= 25    # ← ampliado de 18 a 25
    return len(digits) >= 4

def _clean_digits(tokens: List[str]) -> str:
    return "".join(re.sub(r"\D", "", t) for t in tokens)


def _extract_numeric_window(tokens: List[str], start: int,
                            tag: str) -> Tuple[str, int]:
    """
    Reúne tokens numéricos contiguos tras la keyword.
    Devuelve (numero_concatenado, tokens_consumidos).
    """
    buff, total_len, consumed = [], 0, 0

    for j in range(start, min(start + LOOKAHEAD, len(tokens))):
        t = tokens[j]
        if t.lower() in FIN_STOP:
            break

        if not _is_num_token(t, tag):
            if buff:
                break            # fin de la secuencia numérica
            continue             # todavía no hemos empezado

        digits = re.sub(r"\D", "", t)

        # ── Lógica CLABE ────────────────────────────────────
        if tag == "CLABE":
            # 1) Token único completo (17-25) → lo tomamos y salimos
            if 17 <= len(digits) <= 25:
                buff, total_len = [digits], len(digits)
                consumed = j - start + 1
                break

            # 2) Token parcial: añadimos si no rebasamos 25
            if total_len + len(digits) <= 25:
                buff.append(digits)
                total_len += len(digits)
                consumed = j - start + 1
                if 17 <= total_len <= 25:
                    break
            else:
                break
            continue

        # ── Lógica CUENTA / CLIENTE ─────────────────────────
        buff.append(digits)
        total_len += len(digits)
        consumed = j - start + 1

        if tag == "CLIENTE":
            break                          # un solo token basta
        if tag == "CUENTA" and 8 <= total_len <= 16:
            break

    return _clean_digits(buff), consumed

def _validate_field(tag: str, num: str) -> Optional[str]:
    if not num:
        return None
    if tag == "CLIENTE" and 6 <= len(num) <= 10:
        return num
    if tag == "CUENTA"  and 8 <= len(num) <= 16:
        return num
    if tag == "CLABE"   and 17 <= len(num) <= 25:
        return num
    return None


# ──────────────────────────────────────────────────────────────
# 4.  Función principal
# ──────────────────────────────────────────────────────────────
def extraer_datos_cliente(texto: str) -> Dict[str, str]:
    """
    Devuelve dict con campos:
        • CLIENTE : 6-10 dígitos
        • CUENTA  : 8-16 dígitos
        • CLABE   : 17-25 dígitos (puede venir fragmentada)

    Ejemplo:
    >>> extraer_datos_cliente("clabe 5204165793574496 002730701782730090 "
    ...                       "cliente 34938163 cuenta 70178273009 4368")
    {'CLABE': '002730701782730090',
     'CLIENTE': '34938163',
     'CUENTA': '701782730094368'}
    """
    tokens = _tokenize(texto)
    resultado: Dict[str, str] = {}

    i = 0
    while i < len(tokens):
        tok = tokens[i]
        low = tok.lower()

        def _match(keys):           # fuzzy en-línea
            return any(ratio(low, k) >= SIMILARITY for k in keys)

        tag: Optional[str] = None
        if _match(CLIENTE_KEYS):
            tag = "CLIENTE"
        elif _match(CUENTA_KEYS):
            tag = "CUENTA"
        elif _match(CLABE_KEYS):
            tag = "CLABE"

        if tag:
            num, consumed = _extract_numeric_window(tokens, i + 1, tag)
            val = _validate_field(tag, num)
            if val and tag not in resultado:   # primera ocurrencia
                resultado[tag] = val
            i += consumed                      # saltamos tokens usados
        i += 1

    return resultado
