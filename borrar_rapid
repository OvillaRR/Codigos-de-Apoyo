import torch
import cv2
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
import albumentations as A
from albumentations.pytorch import ToTensorV2

# --- Asunciones ---
# Las clases de tu modelo (ForensicUNetXL, etc.) y la función get_m2() están disponibles.

# --- 1. Configuración ---
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Rutas a tus archivos y modelo
PNG_DATASET_DIR = Path("./png_dataset_con_mascaras")
BEST_MODEL_PATH = Path("./checkpoints/best_model.pth")
IMAGE_INDEX = 1 # Elige el índice de la imagen que quieres probar (ej. 1 para 'imagen_001.png')

# Define el pipeline de pre-procesamiento (debe ser idéntico al de validación)
preprocess = A.Compose([
    # Si tus imágenes guardadas no son del tamaño esperado por el modelo, añade un resize
    # A.Resize(height=512, width=512), 
    A.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ToTensorV2(),
])

# --- 2. Cargar el Modelo Entrenado ---
model = get_m2()
try:
    model.load_state_dict(torch.load(BEST_MODEL_PATH, map_location=DEVICE))
except FileNotFoundError:
    print(f"Error: No se encontró el archivo del modelo en '{BEST_MODEL_PATH}'.")
    exit()

model.to(DEVICE)
model.eval() # ¡Crucial! Poner el modelo en modo evaluación.

# --- 3. Cargar la Imagen y la Máscara Real desde los Archivos ---
image_path = PNG_DATASET_DIR / f"imagen_{IMAGE_INDEX:03d}.png"
mask_path = PNG_DATASET_DIR / f"mascara_{IMAGE_INDEX:03d}.png"

original_image = cv2.imread(str(image_path))
real_mask = cv2.imread(str(mask_path), cv2.IMREAD_GRAYSCALE)

if original_image is None or real_mask is None:
    print(f"Error: No se pudieron cargar los archivos para el índice {IMAGE_INDEX}.")
    exit()

# Convertir la imagen a RGB para visualización y pre-procesamiento
original_image_rgb = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

# --- 4. Pre-procesar la imagen y hacer la predicción ---
# Pre-procesar la imagen para el modelo
processed_image_tensor = preprocess(image=original_image_rgb)['image']

# Realizar la inferencia
with torch.no_grad():
    # Añadir dimensión de lote y mover al dispositivo
    input_tensor = processed_image_tensor.unsqueeze(0).to(DEVICE)
    
    # Obtener predicción del modelo
    pred_logits, _, _ = model(input_tensor)
    
    # Procesar la salida para obtener la máscara binaria
    pred_mask_tensor = (torch.sigmoid(pred_logits) > 0.5).float()
    
# Convertir la máscara predicha a un array de NumPy para visualizarla
predicted_mask_np = pred_mask_tensor.squeeze().cpu().numpy()

# --- 5. Visualizar los tres resultados ---
fig, axs = plt.subplots(1, 3, figsize=(18, 6))

# Imagen Original
axs[0].imshow(original_image_rgb)
axs[0].set_title("Imagen Original")
axs[0].axis('off')

# Máscara Real (Ground Truth)
axs[1].imshow(real_mask, cmap='gray')
axs[1].set_title("Máscara Real (Ground Truth)")
axs[1].axis('off')

# Máscara Predicha
axs[2].imshow(predicted_mask_np, cmap='gray')
axs[2].set_title("Máscara Predicha por el Modelo")
axs[2].axis('off')

plt.tight_layout()
plt.show()
