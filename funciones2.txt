import re

##############################
# 1. Conversion segura a float
##############################
def _to_float(token: str):
    """Convierte '279,819.8' → 279819.8  |  devuelve None si no parece dinero."""
    if token is None:
        return None

    t = token.lower()

    # Correcciones OCR típicas
    for bad, good in {'o': '0', 'l': '1', 's': '5', 'b': '8'}.items():
        t = t.replace(bad, good)

    # detecta último separador decimal (coma o punto)
    last_dot  = t.rfind('.')
    last_coma = t.rfind(',')
    dec_idx   = max(last_dot, last_coma)

    if dec_idx == -1:                       # solo parte entera
        entera = re.sub(r'\D', '', t)
        if len(entera) == 0 or len(entera) > 10:
            return None
        return float(entera)

    entera = re.sub(r'\D', '', t[:dec_idx])
    dec    = re.sub(r'\D', '', t[dec_idx+1:])

    if not entera or len(entera) > 10:      # folio demasiado largo
        return None
    if not (1 <= len(dec) <= 2):            # 0, 1 ó 2 decimales OK
        return None

    try:
        return float(f"{entera}.{dec}")
    except ValueError:
        return None


######################################
# 2. Nuevo filtro de “parece importe”
######################################
def es_monto_potencial(token: str):
    """Acepta tokens con ≥3 dígitos totales y ≤10 dígitos netos."""
    if token is None or not re.search(r'\d', token):
        return False
    cleaned = re.sub(r'\D', '', token)
    return 3 <= len(cleaned) <= 10


####################################
# 3. Función de extracción revisada
####################################
def extraer_montos_con_reglas(texto):
    tokens = tokenizar_texto_simple(texto)

    found_keywords = []
    for i, tok in enumerate(tokens):
        low = tok.lower()
        if any(ratio(low, k) > SIMILARITY_THRESHOLD for k in DEPOSITO_KEYS):
            found_keywords.append({"index": i, "type": "DEPOSITO"})
        elif any(ratio(low, k) > SIMILARITY_THRESHOLD for k in RETIRO_KEYS):
            found_keywords.append({"index": i, "type": "RETIRO"})

    resultados = {}
    for idx, info in enumerate(found_keywords):
        start = info["index"] + 1
        end   = found_keywords[idx+1]["index"] if idx+1 < len(found_keywords) else len(tokens)

        candidatos = []
        for tok in tokens[start:end]:
            if es_monto_potencial(tok):
                val = _to_float(tok)
                if val:                     # descarta None y 0.0
                    candidatos.append(val)

        if candidatos:
            # regla: nos quedamos con el MAYOR dentro de un rango razonable
            candidatos = [v for v in candidatos if v < 10_000_000]
            if candidatos:
                resultados[f"MONTO_{info['type']}"] = max(candidatos)

    return resultados






# --- palabras que indican que ya cambió de bloque y debemos parar la búsqueda
STOP_WORDS = {"saldo", "intereses", "rendimiento", "tasa", "promedio", "dias"}

def extraer_montos_con_reglas(texto):
    tokens = tokenizar_texto_simple(texto)

    # localizamos las palabras clave igual que antes ..........................
    found_keywords = []
    for i, tok in enumerate(tokens):
        low = tok.lower()
        if any(ratio(low, k) > SIMILARITY_THRESHOLD for k in DEPOSITO_KEYS):
            found_keywords.append({"index": i, "type": "DEPOSITO"})
        elif any(ratio(low, k) > SIMILARITY_THRESHOLD for k in RETIRO_KEYS):
            found_keywords.append({"index": i, "type": "RETIRO"})

    resultados = {}
    for idx_kw, info in enumerate(found_keywords):

        # ---------- 1. DEFINIR VENTANA MÁS CORTA -----------
        start = info["index"] + 1
        # a) termina en la siguiente keyword …
        end_kw = found_keywords[idx_kw + 1]["index"] if idx_kw + 1 < len(found_keywords) else len(tokens)
        # b) … o en la primera STOP_WORD
        end_sw = next((j for j in range(start, end_kw)
                       if tokens[j].lower() in STOP_WORDS), end_kw)
        end = min(end_kw, end_sw)

        window = tokens[start:end]

        # ---------- 2. BUSCAR CANDIDATOS -------------------
        # prioridad 1: número justo después de "(+)" o "(-)"
        if "(+)" in window or "(-)" in window:
            signo_idx = window.index("(-)") if "(-)" in window else window.index("(+)")
            after_signo = window[signo_idx+1 : signo_idx+6]   # máx 5 tokens después
        else:
            after_signo = window[:6]                          # máx 6 tokens iniciales

        candidatos = [ _to_float(tok) for tok in after_signo if es_monto_potencial(tok) ]
        candidatos = [ c for c in candidatos if c is not None and 0 < c < 10_000_000 ]

        # si no se encontró nada cercano, reconsidera toda la ventana y escoge el mayor
        if not candidatos:
            candidatos = [ _to_float(tok) for tok in window if es_monto_potencial(tok) ]
            candidatos = [ c for c in candidatos if c is not None and 0 < c < 10_000_000 ]

        if candidatos:
            resultados[f"MONTO_{info['type']}"] = candidatos[0]   # el primero según la prioridad
    return resultados