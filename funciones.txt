import re

# -------- NUEVO FILTRO ------------
def es_monto_potencial(token):
    """
    Devuelve True solo si el token parece un importe monetario:
    - Máx 10 dígitos netos
    - Respeta formato de miles o decimales
    - No todos los dígitos iguales
    """
    if token is None:
        return False

    tok = token.strip()
    # 1) requisito: debe contener al menos un dígito
    if not re.search(r"\d", tok):
        return False

    # 2) descartar tokens demasiado largos una vez quitados separadores
    solo_digitos = re.sub(r"\D", "", tok)
    if len(solo_digitos) > 10:          # ← umbral ajustable
        return False

    # 3) patrón de "parece dinero"
    patron_miles = re.compile(r"^[-+]?\d{1,3}(?:[.,]\d{3})*(?:[.,]\d{2})?$")
    patron_simple = re.compile(r"^[-+]?\d{1,6}(?:[.,]\d{2})?$")
    if not (patron_miles.match(tok) or patron_simple.match(tok)):
        return False

    # 4) descartar si todos los dígitos son iguales (0000, 1111, …)
    if len(set(solo_digitos)) == 1:
        return False

    return True


def limpiar_y_convertir_monto(texto_monto):
    """
    Convierte un token que ya pasó el filtro a float.
    Maneja coma o punto como separador decimal (elige el último separador).
    """
    if not texto_monto:
        return None

    tmp = texto_monto.lower()

    # Correcciones OCR básicas
    for k, v in {'o': '0', 'l': '1', 's': '5', 'b': '8'}.items():
        tmp = tmp.replace(k, v)

    # Localizar el último separador decimal (, o .)
    ult_coma = tmp.rfind(',')
    ult_punto = tmp.rfind('.')
    idx_decimal = max(ult_coma, ult_punto)

    if idx_decimal == -1:  # no decimal → solo enteros
        num_entero = re.sub(r"[^\d]", "", tmp)
        return float(num_entero) if num_entero else None

    # Separar parte entera y decimal
    parte_entera = re.sub(r"[^\d]", "", tmp[:idx_decimal])
    parte_decimal = re.sub(r"[^\d]", "", tmp[idx_decimal+1:])

    # Normalizar a 2 decimales (trunca si vienen más)
    parte_decimal = (parte_decimal + "00")[:2]
    numero_normalizado = f"{parte_entera}.{parte_decimal}"

    try:
        return float(numero_normalizado)
    except ValueError:
        return None
