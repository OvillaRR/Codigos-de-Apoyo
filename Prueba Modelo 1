from transformers import DetrImageProcessor, DetrForObjectDetection
import torch
from PIL import Image
import requests
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np 



image = Image.open(r"C:\Users\altom\OneDrive\Escritorio\image_x.jpg").convert("RGB")


# Esto descarga y cachea el processor y el modelo
processor = DetrImageProcessor.from_pretrained("TahaDouaji/detr-doc-table-detection")
model     = DetrForObjectDetection.from_pretrained("TahaDouaji/detr-doc-table-detection")

# Luego pasas 'image' al processor como ya lo haces:
inputs = processor(images=image, return_tensors="pt")

inputs = processor(images=[image], return_tensors="pt")  # ← ojo al []
outputs = model(**inputs)

# 3) Post-process y desenpaquetar la detección única:
target_sizes = torch.tensor([image.size[::-1]])  # (alto, ancho)
results = processor.post_process_object_detection(
    outputs, target_sizes=target_sizes, threshold=0.3
)[0]

# 2. Crea la figura
img_arr = np.array(image)
fig, ax = plt.subplots(1, figsize=(12, 8))
ax.imshow(img_arr)
ax.axis('off')  # opcional, quita ejes

# 3. Dibuja cada caja
for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    x0, y0, x1, y1 = box.tolist()
    width, height = x1 - x0, y1 - y0
    
    # Crea un rectángulo
    rect = patches.Rectangle(
        (x0, y0), width, height,
        linewidth=2,
        edgecolor='red',
        facecolor='none'
    )
    ax.add_patch(rect)
    
    # Etiqueta con nombre y score
    class_name = model.config.id2label[label.item()]
    ax.text(
        x0, y0 - 5,
        f"{class_name}: {score:.2f}",
        color='red',
        fontsize=12,
        backgroundcolor='white'
    )

# 4. Muestra
plt.tight_layout()
plt.show()
