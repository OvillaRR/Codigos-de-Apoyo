def mejores_cuantiles(df, dgv, q_inf=0.05,
                      q_sup_grid=np.arange(0.80, 1.001, 0.01)):
    res = {}
    claves = sorted(map(int, dgv.keys()))
    claves.append(df["Hoja"].max() + 1)          # tope artificial

    for i, clave in enumerate(claves[:-1]):
        inicio = dgv[clave]["Hoja"]
        fin    = claves[i+1] - 1                 # hasta antes del siguiente bloque

        bloque = df.query("@inicio <= Hoja <= @fin").copy()
        if bloque.empty:
            continue

        monto_global = dgv[clave]["MONTO_DEPOSITO"] + dgv[clave]["MONTO_RETIRO"]

        mejor = {"q_sup": None, "total": None, "diff": np.inf}

        for q_sup in q_sup_grid:
            q_hi  = bloque["MONTO_CORR_2"].quantile(q_sup)
            q_lo  = bloque["MONTO_CORR_2"].quantile(q_inf)

            total = bloque.query("@q_lo <= MONTO_CORR_2 <= @q_hi")["MONTO_CORR_2"].sum()
            diff  = abs(monto_global - total)

            if diff < mejor["diff"]:
                mejor.update({"q_sup": q_sup, "total": total, "diff": diff})

        res[clave] = mejor | {"n_obs": len(bloque)}
    return pd.DataFrame(res).T      # DataFrame para inspecciÃ³n